# Generated by Assemblage for codoc 0.2.0.

# Run `make help' to get the list of targets.

.PHONY: all clean lib bin test doc distclean js help lib-codoc bin-codoc

# 
# Main project configuration
# 

BUILDIR     ?= _build
DUMPAST     ?= ocaml-dumpast
JS_OF_OCAML ?= js_of_ocaml
LIBDIR      ?= $(LIBDIR)
LN          ?= ln -sf
MKDIR       ?= mkdir -p
OCAMLMKLIB  ?= ocamlmklib
ROOTDIR     = $(shell pwd)
ifeq ($(HAS_NATIVE_TOOLCHAIN:true=),)
OCAMLC      ?= ocamlc.opt
OCAMLDEP    ?= ocamldep.opt
OCAMLDOC    ?= ocamldoc.opt
OCAMLOPT    ?= ocamlopt.opt
else
OCAMLC      ?= ocamlc
OCAMLDEP    ?= ocamldep
OCAMLDOC    ?= ocamldoc
OCAMLOPT    ?= ocamlopt
endif

HAS_ANNOT            ?= true
HAS_BYTE             ?= true
HAS_DEBUG            ?= true
HAS_DOC              ?= false
HAS_JS               ?= false
HAS_NATIVE           ?= true
HAS_NATIVE_DYNLINK   ?= true
HAS_NATIVE_TOOLCHAIN ?= true
HAS_TEST             ?= false
HAS_WARN_ERROR       ?= false

# 
# Global variables
# 

all            := lib bin
compile-byte   := 
compile-native := 
link-byte      := 
link-native    := 
ifeq ($(HAS_WARN_ERROR:true=),)
compile-byte   += -warn-error A-44-4-48 -w A-44-4-48
endif
ifeq ($(HAS_DEBUG:true=),)
compile-byte   += -g
compile-native += -g
link-byte      += -g
link-native    += -g
endif
ifeq ($(HAS_ANNOT:true=),)
compile-byte   += -bin-annot
endif

# 
# Component configuration.
# 
# Each component has variables associated to the different phases of the build.
# <NAME>.<PHASE> controls the compilation options for the component <NAME>,
# during the phase <PHASE>.
# 

lib := lib-codoc

# Library: codoc
lib-codoc := 
ifeq ($(HAS_BYTE:true=),)
lib-codoc += $(BUILDIR)/lib-codoc/codoc.cma
endif
ifeq ($(HAS_NATIVE:true=),)
lib-codoc +=  \
    $(BUILDIR)/lib-codoc/codoc.a \
    $(BUILDIR)/lib-codoc/codoc.cmxa
endif
ifeq ($(HAS_NATIVE:true=)$(HAS_NATIVE_DYNLINK:true=),)
lib-codoc += $(BUILDIR)/lib-codoc/codoc.cmxs
endif
lib-codoc.archive-byte ?=  \
    $(archive-byte) \
    -a \
    $(BUILDIR)/lib-codoc/codocHtml.cmo \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmo \
    $(BUILDIR)/lib-codoc/codocDoc.cmo \
    $(BUILDIR)/lib-codoc/codocUtil.cmo \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmo \
    $(BUILDIR)/lib-codoc/codocXml.cmo \
    $(BUILDIR)/lib-codoc/codocIndex.cmo \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmo \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmo
lib-codoc.archive-native ?=  \
    $(archive-native) \
    -a \
    $(BUILDIR)/lib-codoc/codocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmx \
    $(BUILDIR)/lib-codoc/codocDoc.cmx \
    $(BUILDIR)/lib-codoc/codocUtil.cmx \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocXml.cmx \
    $(BUILDIR)/lib-codoc/codocIndex.cmx \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmx \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmx
lib-codoc.archive-shared ?=  \
    $(archive-shared) \
    -shared \
    -linkall \
    $(BUILDIR)/lib-codoc/codocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmx \
    $(BUILDIR)/lib-codoc/codocDoc.cmx \
    $(BUILDIR)/lib-codoc/codocUtil.cmx \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocXml.cmx \
    $(BUILDIR)/lib-codoc/codocIndex.cmx \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmx \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmx
lib-codoc.compile-byte ?=  \
    $(compile-byte) \
    -w \
    @f@p@u@y \
    -I $(BUILDIR)/lib-codoc
lib-codoc.compile-native ?=  \
    $(compile-native) \
    -w \
    @f@p@u@y \
    -I $(BUILDIR)/lib-codoc
lib-codoc.dep ?=  \
    $(dep) \
    -I $(BUILDIR)/lib-codoc
lib-codoc.pp-byte ?= $(pp-byte)
lib-codoc.pp-native ?= $(pp-native)

bin := bin-codoc

js := 

# Binary: codoc
bin-codoc := 
ifeq ($(HAS_BYTE:true=),)
bin-codoc += $(BUILDIR)/bin-codoc/codoc.byte
endif
ifeq ($(HAS_NATIVE:true=),)
bin-codoc += $(BUILDIR)/bin-codoc/codoc.native
endif
bin-codoc.compile-byte ?=  \
    $(compile-byte) \
    -w \
    @f@p@u@y \
    -I $(BUILDIR)/bin-codoc
bin-codoc.compile-native ?=  \
    $(compile-native) \
    -w \
    @f@p@u@y \
    -I $(BUILDIR)/bin-codoc
bin-codoc.dep ?=  \
    $(dep) \
    -I $(BUILDIR)/bin-codoc
bin-codoc.link-byte ?=  \
    $(link-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r uri \
            cmdliner \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r uri \
            cmdliner \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    $(BUILDIR)/unit-codocConfig/codocConfig.cmo \
    $(BUILDIR)/bin-codoc/codocCli.cmo \
    $(BUILDIR)/lib-codoc/codoc.cma \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmo \
    $(BUILDIR)/bin-codoc/codocCliExtract.cmo \
    $(BUILDIR)/bin-codoc/codocCliLink.cmo \
    $(BUILDIR)/bin-codoc/codocCliHtml.cmo \
    $(BUILDIR)/bin-codoc/codocCliDoc.cmo \
    $(BUILDIR)/bin-codoc/codocMain.cmo
bin-codoc.link-js ?= $(link-js)
bin-codoc.link-native ?=  \
    $(link-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r uri \
            cmdliner \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    $(shell ocamlfind query -r -predicates native -format "%d/%a" -r uri \
            cmdliner \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    $(BUILDIR)/unit-codocConfig/codocConfig.cmx \
    $(BUILDIR)/bin-codoc/codocCli.cmx \
    $(BUILDIR)/lib-codoc/codoc.cmxa \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmx \
    $(BUILDIR)/bin-codoc/codocCliExtract.cmx \
    $(BUILDIR)/bin-codoc/codocCliLink.cmx \
    $(BUILDIR)/bin-codoc/codocCliHtml.cmx \
    $(BUILDIR)/bin-codoc/codocCliDoc.cmx \
    $(BUILDIR)/bin-codoc/codocMain.cmx
bin-codoc.pp-byte ?= $(pp-byte)
bin-codoc.pp-native ?= $(pp-native)

test := 

doc := 

# Compilation unit: lib/codocHtml
unit-codocHtml-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow)
unit-codocHtml-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow)
unit-codocHtml-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocHtml-lib-codoc.pp-byte ?=  \
    $(lib-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocHtml-lib-codoc.pp-native ?=  \
    $(lib-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: lib/codocDocMaps
unit-codocDocMaps-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r doc-ock-lib)
unit-codocDocMaps-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r doc-ock-lib)
unit-codocDocMaps-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocDocMaps-lib-codoc.pp-byte ?= $(lib-codoc.pp-byte)
unit-codocDocMaps-lib-codoc.pp-native ?= $(lib-codoc.pp-native)

# Compilation unit: lib/codocDoc
unit-codocDoc-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow \
            doc-ock-lib)
unit-codocDoc-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow \
            doc-ock-lib)
unit-codocDoc-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocDoc-lib-codoc.pp-byte ?=  \
    $(lib-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocDoc-lib-codoc.pp-native ?=  \
    $(lib-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: lib/codocUtil
unit-codocUtil-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r stringext \
            doc-ock-lib \
            cow)
unit-codocUtil-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r stringext \
            doc-ock-lib \
            cow)
unit-codocUtil-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocUtil-lib-codoc.pp-byte ?= $(lib-codoc.pp-byte)
unit-codocUtil-lib-codoc.pp-native ?= $(lib-codoc.pp-native)

# Compilation unit: lib/codocDocHtml
unit-codocDocHtml-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r doc-ock-lib \
            cow)
unit-codocDocHtml-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r doc-ock-lib \
            cow)
unit-codocDocHtml-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocDocHtml-lib-codoc.pp-byte ?=  \
    $(lib-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocDocHtml-lib-codoc.pp-native ?=  \
    $(lib-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: lib/codocXml
unit-codocXml-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r xmlm \
            doc-ock-xml \
            cow \
            doc-ock-lib)
unit-codocXml-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r xmlm \
            doc-ock-xml \
            cow \
            doc-ock-lib)
unit-codocXml-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocXml-lib-codoc.pp-byte ?= $(lib-codoc.pp-byte)
unit-codocXml-lib-codoc.pp-native ?= $(lib-codoc.pp-native)

# Compilation unit: lib/codocIndex
unit-codocIndex-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow)
unit-codocIndex-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow)
unit-codocIndex-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocIndex-lib-codoc.pp-byte ?=  \
    $(lib-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocIndex-lib-codoc.pp-native ?=  \
    $(lib-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: lib/codocIndexHtml
unit-codocIndexHtml-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow \
            stringext \
            doc-ock-lib)
unit-codocIndexHtml-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow \
            stringext \
            doc-ock-lib)
unit-codocIndexHtml-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocIndexHtml-lib-codoc.pp-byte ?=  \
    $(lib-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocIndexHtml-lib-codoc.pp-native ?=  \
    $(lib-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: lib/codocEnvironment
unit-codocEnvironment-lib-codoc.compile-byte ?=  \
    $(lib-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r doc-ock-xml \
            cow \
            doc-ock-lib)
unit-codocEnvironment-lib-codoc.compile-native ?=  \
    $(lib-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r doc-ock-xml \
            cow \
            doc-ock-lib)
unit-codocEnvironment-lib-codoc.dep ?= $(lib-codoc.dep)
unit-codocEnvironment-lib-codoc.pp-byte ?= $(lib-codoc.pp-byte)
unit-codocEnvironment-lib-codoc.pp-native ?= $(lib-codoc.pp-native)

# Compilation unit: cli/codocConfig
unit-codocConfig.compile-byte ?= $(compile-byte)
unit-codocConfig.compile-native ?= $(compile-native)
unit-codocConfig.dep ?= $(dep)
unit-codocConfig.pp-byte ?= $(pp-byte)
unit-codocConfig.pp-native ?= $(pp-native)

# Compilation unit: cli/codocCli
unit-codocCli-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r uri \
            cmdliner) \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCli-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r uri \
            cmdliner) \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCli-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCli-bin-codoc.pp-byte ?= $(bin-codoc.pp-byte)
unit-codocCli-bin-codoc.pp-native ?= $(bin-codoc.pp-native)

# Compilation unit: cli/codocSysUtil
unit-codocSysUtil.compile-byte ?=  \
    $(compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r xmlm)
unit-codocSysUtil.compile-native ?=  \
    $(compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r xmlm)
unit-codocSysUtil.dep ?= $(dep)
unit-codocSysUtil.pp-byte ?= $(pp-byte)
unit-codocSysUtil.pp-native ?= $(pp-native)

# Compilation unit: cli/codocCliExtract
unit-codocCliExtract-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliExtract-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliExtract-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliExtract-bin-codoc.pp-byte ?= $(bin-codoc.pp-byte)
unit-codocCliExtract-bin-codoc.pp-native ?= $(bin-codoc.pp-native)

# Compilation unit: cli/codocCliLink
unit-codocCliLink-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r xmlm \
            cow \
            doc-ock-lib \
            stringext \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliLink-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r xmlm \
            cow \
            doc-ock-lib \
            stringext \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliLink-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliLink-bin-codoc.pp-byte ?= $(bin-codoc.pp-byte)
unit-codocCliLink-bin-codoc.pp-native ?= $(bin-codoc.pp-native)

# Compilation unit: cli/codocCliHtml
unit-codocCliHtml-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r xmlm \
            cow \
            doc-ock-lib \
            stringext \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliHtml-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r xmlm \
            cow \
            doc-ock-lib \
            stringext \
            doc-ock-xml \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliHtml-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliHtml-bin-codoc.pp-byte ?=  \
    $(bin-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocCliHtml-bin-codoc.pp-native ?=  \
    $(bin-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: cli/codocCliDoc
unit-codocCliDoc-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow \
            doc-ock-lib \
            doc-ock-xml \
            stringext \
            xmlm \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliDoc-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cow \
            doc-ock-lib \
            doc-ock-xml \
            stringext \
            xmlm \
            uri \
            cmdliner) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliDoc-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil \
    -I $(BUILDIR)/unit-codocConfig
unit-codocCliDoc-bin-codoc.pp-byte ?=  \
    $(bin-codoc.pp-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)
unit-codocCliDoc-bin-codoc.pp-native ?=  \
    $(bin-codoc.pp-native) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates byte -format "%d/%a" -r cow.syntax) \
    $(shell ocamlfind query -r -predicates syntax,preprocessor -format "-I %d %a" -r cow.syntax)

# Compilation unit: cli/codocMain
unit-codocMain-bin-codoc.compile-byte ?=  \
    $(bin-codoc.compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r cmdliner \
            uri \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    -I $(BUILDIR)/unit-codocConfig \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil
unit-codocMain-bin-codoc.compile-native ?=  \
    $(bin-codoc.compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r cmdliner \
            uri \
            cow \
            doc-ock-lib \
            stringext \
            xmlm \
            doc-ock-xml) \
    -I $(BUILDIR)/unit-codocConfig \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil
unit-codocMain-bin-codoc.dep ?=  \
    $(bin-codoc.dep) \
    -I $(BUILDIR)/unit-codocConfig \
    -I $(BUILDIR)/lib-codoc \
    -I $(BUILDIR)/unit-codocSysUtil
unit-codocMain-bin-codoc.pp-byte ?= $(bin-codoc.pp-byte)
unit-codocMain-bin-codoc.pp-native ?= $(bin-codoc.pp-native)


all:: 
	@echo '[04mall[m [1;34m=>[m ${all}'
	@$(MAKE) $(all)
	@if [ "x${HAS_JS}" = "x1" ]; then $(MAKE) js; fi
	@if [ "x${HAS_TEST}" = "x1" ]; then $(MAKE) test; fi
	@if [ "x${HAS_DOC}" = "x1" ]; then $(MAKE) doc; fi
	@if [ "x${HAS_FULL_DOC}" = "x1" ]; then $(MAKE) full-doc; fi
	@echo '[32m==>[m Done!'

clean:: 
	rm -f *~ **/*~
	rm -rf $(BUILDIR)

distclean:: clean
	rm -f Makefile codoc.install META .merlin

install:: all
	@opam-installer --prefix $(shell opam config var prefix) codoc.install

help: 
	@echo 'Use [04mVERBOSE=true[m to show the full commands.'
	@echo 'The following targets are available (use "make [04m<target>[m"):'
	@echo
	@echo ' - [04mall[m -- build all the active targets.'
	@echo ' - [04mlib-codoc[m -- build the library codoc.'
	@echo ' - [04mbin-codoc[m -- build the executable codoc.'
	@echo ' - [04mdoc[m -- build the documentation.'
	@echo ' - [04mtest[m -- build and run the test.'
	@echo ' - [04mjs[m -- build the js_of_ocaml targets.'
	@echo ' - [04mclean[m -- clean the build artefacts.'
	@echo ' - [04mdistclean[m -- clean the project to prepare the release.'
	@echo
	@echo
	@echo 'Current configuration (use "make [04mVAR=BOOL[m" to modify):'
	@echo
	@echo ' - [04mHAS_ANNOT=$(HAS_ANNOT)[m -- Build OCaml binary annotations files.'
	@echo ' - [04mHAS_BYTE=$(HAS_BYTE)[m -- Byte code OCaml compilation is available.'
	@echo ' - [04mHAS_DEBUG=$(HAS_DEBUG)[m -- Build with debugging support.'
	@echo ' - [04mHAS_DOC=$(HAS_DOC)[m -- Build the documentation.'
	@echo ' - [04mHAS_JS=$(HAS_JS)[m -- JavaScript code OCaml compilation with js_of_ocaml is available.'
	@echo ' - [04mHAS_NATIVE=$(HAS_NATIVE)[m -- Native code OCaml compilation is available.'
	@echo ' - [04mHAS_NATIVE_DYNLINK=$(HAS_NATIVE_DYNLINK)[m -- Native code OCaml dynamic linking is available.'
	@echo ' - [04mHAS_NATIVE_TOOLCHAIN=$(HAS_NATIVE_TOOLCHAIN)[m -- The native compiled OCaml toolchain is available (.opt tools).'
	@echo ' - [04mHAS_TEST=$(HAS_TEST)[m -- Build the tests.'
	@echo ' - [04mHAS_WARN_ERROR=$(HAS_WARN_ERROR)[m -- Build with warnings as errors.'
	@echo

lib: $(lib)
	@

lib-codoc: $(lib-codoc)
	@

$(BUILDIR)/lib-codoc/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/lib-codoc'; \
        else echo 'lib-codoc                 [32m<=[m [01mprepare[m lib-codoc'; fi
	@$(MKDIR) $(BUILDIR)/lib-codoc

$(BUILDIR)/lib-codoc/codoc.cma:  \
    $(BUILDIR)/lib-codoc/codocHtml.cmo \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmo \
    $(BUILDIR)/lib-codoc/codocDoc.cmo \
    $(BUILDIR)/lib-codoc/codocUtil.cmo \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmo \
    $(BUILDIR)/lib-codoc/codocXml.cmo \
    $(BUILDIR)/lib-codoc/codocIndex.cmo \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmo \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmo \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) $(lib-codoc.archive-byte) -o $(BUILDIR)/lib-codoc/codoc.cma'; \
        else echo 'codoc.cma                 [32m<=[m [01marchive-byte[m lib-codoc'; fi
	@$(OCAMLC) $(lib-codoc.archive-byte) -o $(BUILDIR)/lib-codoc/codoc.cma

$(BUILDIR)/lib-codoc/codoc.cmxa $(BUILDIR)/lib-codoc/codoc.a:  \
    $(BUILDIR)/lib-codoc/codocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmx \
    $(BUILDIR)/lib-codoc/codocDoc.cmx \
    $(BUILDIR)/lib-codoc/codocUtil.cmx \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocXml.cmx \
    $(BUILDIR)/lib-codoc/codocIndex.cmx \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmx \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmx \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-codoc.archive-native) -o $(BUILDIR)/lib-codoc/codoc.cmxa'; \
        else echo 'codoc.cmxa codoc.a        [32m<=[m [01marchive-native[m lib-codoc'; fi
	@$(OCAMLOPT) $(lib-codoc.archive-native) -o $(BUILDIR)/lib-codoc/codoc.cmxa

$(BUILDIR)/lib-codoc/codoc.cmxs:  \
    $(BUILDIR)/lib-codoc/codocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmx \
    $(BUILDIR)/lib-codoc/codocDoc.cmx \
    $(BUILDIR)/lib-codoc/codocUtil.cmx \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmx \
    $(BUILDIR)/lib-codoc/codocXml.cmx \
    $(BUILDIR)/lib-codoc/codocIndex.cmx \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmx \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmx \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-codoc.archive-shared) -o $(BUILDIR)/lib-codoc/codoc.cmxs'; \
        else echo 'codoc.cmxs                [32m<=[m [01marchive-shared[m lib-codoc'; fi
	@$(OCAMLOPT) $(lib-codoc.archive-shared) -o $(BUILDIR)/lib-codoc/codoc.cmxs

bin: $(bin)
	@

js: $(js)
	@

bin-codoc: $(bin-codoc)
	@

$(BUILDIR)/bin-codoc/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/bin-codoc'; \
        else echo 'bin-codoc                 [32m<=[m [01mprepare[m bin-codoc'; fi
	@$(MKDIR) $(BUILDIR)/bin-codoc

$(BUILDIR)/bin-codoc/codoc.byte:  \
    $(BUILDIR)/bin-codoc/codocCli.cmo \
    $(BUILDIR)/bin-codoc/codocCliExtract.cmo \
    $(BUILDIR)/bin-codoc/codocCliLink.cmo \
    $(BUILDIR)/bin-codoc/codocCliHtml.cmo \
    $(BUILDIR)/bin-codoc/codocCliDoc.cmo \
    $(BUILDIR)/bin-codoc/codocMain.cmo \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) $(bin-codoc.link-byte) -o $(BUILDIR)/bin-codoc/codoc.byte'; \
        else echo 'codoc.byte                [32m<=[m [01mlink-byte[m bin-codoc'; fi
	@$(OCAMLC) $(bin-codoc.link-byte) -o $(BUILDIR)/bin-codoc/codoc.byte

$(BUILDIR)/bin-codoc/codoc.native:  \
    $(BUILDIR)/bin-codoc/codocCli.cmx \
    $(BUILDIR)/bin-codoc/codocCliExtract.cmx \
    $(BUILDIR)/bin-codoc/codocCliLink.cmx \
    $(BUILDIR)/bin-codoc/codocCliHtml.cmx \
    $(BUILDIR)/bin-codoc/codocCliDoc.cmx \
    $(BUILDIR)/bin-codoc/codocMain.cmx \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(bin-codoc.link-native) -o $(BUILDIR)/bin-codoc/codoc.native'; \
        else echo 'codoc.native              [32m<=[m [01mlink-native[m bin-codoc'; fi
	@$(OCAMLOPT) $(bin-codoc.link-native) -o $(BUILDIR)/bin-codoc/codoc.native

$(BUILDIR)/bin-codoc/codoc.js: $(BUILDIR)/bin-codoc/codoc.byte
	@if test -n "$$VERBOSE"; \
        then echo '$(JS_OF_OCAML) $(bin-codoc.link-js) $(BUILDIR)/bin-codoc/codoc.js'; \
        else echo 'codoc.js                  [32m<=[m [01mlink-js[m bin-codoc'; fi
	@$(JS_OF_OCAML) $(bin-codoc.link-js) $(BUILDIR)/bin-codoc/codoc.js

test: $(test)
	@

doc: $(doc)
	@

$(BUILDIR)/lib-codoc/codocHtml.ml: lib/codocHtml.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocHtml.ml $(BUILDIR)/lib-codoc/codocHtml.ml'; \
        else echo 'codocHtml.ml              [32m<=[m [01mprepare[m unit-codocHtml-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocHtml.ml $(BUILDIR)/lib-codoc/codocHtml.ml

$(BUILDIR)/lib-codoc/codocHtml.cml-byte: $(BUILDIR)/lib-codoc/codocHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocHtml.ml > $(BUILDIR)/lib-codoc/codocHtml.cml-byte'; \
        else echo 'codocHtml.cml-byte        [32m<=[m [01mpp-byte[m unit-codocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocHtml.ml > $(BUILDIR)/lib-codoc/codocHtml.cml-byte

$(BUILDIR)/lib-codoc/codocHtml.cml-native: $(BUILDIR)/lib-codoc/codocHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocHtml.ml > $(BUILDIR)/lib-codoc/codocHtml.cml-native'; \
        else echo 'codocHtml.cml-native      [32m<=[m [01mpp-native[m unit-codocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocHtml.ml > $(BUILDIR)/lib-codoc/codocHtml.cml-native

$(BUILDIR)/lib-codoc/codocHtml.ml.d: $(BUILDIR)/lib-codoc/codocHtml.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-byte > $(BUILDIR)/lib-codoc/codocHtml.ml.d'; \
        else echo 'codocHtml.ml.d            [32m<=[m [01mdep[m unit-codocHtml-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-byte > $(BUILDIR)/lib-codoc/codocHtml.ml.d

$(BUILDIR)/lib-codoc/codocHtml.cmi $(BUILDIR)/lib-codoc/codocHtml.cmo:  \
    $(BUILDIR)/lib-codoc/codocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocHtml.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-byte'; \
        else echo 'codocHtml.cmi codocHtml.cmo [32m<=[m [01mcompile-byte[m unit-codocHtml-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-byte

$(BUILDIR)/lib-codoc/codocHtml.cmx:  \
    $(BUILDIR)/lib-codoc/codocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocHtml.cmi \
    $(BUILDIR)/lib-codoc/codocHtml.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-native'; \
        else echo 'codocHtml.cmx             [32m<=[m [01mcompile-native[m unit-codocHtml-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocHtml.cml-native

$(BUILDIR)/lib-codoc/codocDocMaps.ml: lib/codocDocMaps.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocDocMaps.ml $(BUILDIR)/lib-codoc/codocDocMaps.ml'; \
        else echo 'codocDocMaps.ml           [32m<=[m [01mprepare[m unit-codocDocMaps-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocDocMaps.ml $(BUILDIR)/lib-codoc/codocDocMaps.ml

$(BUILDIR)/lib-codoc/codocDocMaps.cml-byte: $(BUILDIR)/lib-codoc/codocDocMaps.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocMaps-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocMaps.ml > $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte'; \
        else echo 'codocDocMaps.cml-byte     [32m<=[m [01mpp-byte[m unit-codocDocMaps-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocMaps-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocMaps.ml > $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte

$(BUILDIR)/lib-codoc/codocDocMaps.cml-native: $(BUILDIR)/lib-codoc/codocDocMaps.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocMaps-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocMaps.ml > $(BUILDIR)/lib-codoc/codocDocMaps.cml-native'; \
        else echo 'codocDocMaps.cml-native   [32m<=[m [01mpp-native[m unit-codocDocMaps-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocMaps-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocMaps.ml > $(BUILDIR)/lib-codoc/codocDocMaps.cml-native

$(BUILDIR)/lib-codoc/codocDocMaps.ml.d: $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocDocMaps-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte > $(BUILDIR)/lib-codoc/codocDocMaps.ml.d'; \
        else echo 'codocDocMaps.ml.d         [32m<=[m [01mdep[m unit-codocDocMaps-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocDocMaps-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte > $(BUILDIR)/lib-codoc/codocDocMaps.ml.d

$(BUILDIR)/lib-codoc/codocDocMaps.cmi $(BUILDIR)/lib-codoc/codocDocMaps.cmo:  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml.d \
    $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocDocMaps-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte'; \
        else echo 'codocDocMaps.cmi codocDocMaps.cmo [32m<=[m [01mcompile-byte[m unit-codocDocMaps-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocDocMaps-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-byte

$(BUILDIR)/lib-codoc/codocDocMaps.cmx:  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml.d \
    $(BUILDIR)/lib-codoc/codocDocMaps.cmi \
    $(BUILDIR)/lib-codoc/codocDocMaps.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocDocMaps-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-native'; \
        else echo 'codocDocMaps.cmx          [32m<=[m [01mcompile-native[m unit-codocDocMaps-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocDocMaps-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDocMaps.cml-native

$(BUILDIR)/lib-codoc/codocDoc.mli: lib/codocDoc.mli \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocDoc.mli $(BUILDIR)/lib-codoc/codocDoc.mli'; \
        else echo 'codocDoc.mli              [32m<=[m [01mprepare[m unit-codocDoc-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocDoc.mli $(BUILDIR)/lib-codoc/codocDoc.mli

$(BUILDIR)/lib-codoc/codocDoc.cmli-byte: $(BUILDIR)/lib-codoc/codocDoc.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDoc.mli > $(BUILDIR)/lib-codoc/codocDoc.cmli-byte'; \
        else echo 'codocDoc.cmli-byte        [32m<=[m [01mpp-byte[m unit-codocDoc-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDoc.mli > $(BUILDIR)/lib-codoc/codocDoc.cmli-byte

$(BUILDIR)/lib-codoc/codocDoc.cmli-native: $(BUILDIR)/lib-codoc/codocDoc.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDoc.mli > $(BUILDIR)/lib-codoc/codocDoc.cmli-native'; \
        else echo 'codocDoc.cmli-native      [32m<=[m [01mpp-native[m unit-codocDoc-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDoc.mli > $(BUILDIR)/lib-codoc/codocDoc.cmli-native

$(BUILDIR)/lib-codoc/codocDoc.mli.d: $(BUILDIR)/lib-codoc/codocDoc.cmli-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocDoc-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocDoc.cmli-byte > $(BUILDIR)/lib-codoc/codocDoc.mli.d'; \
        else echo 'codocDoc.mli.d            [32m<=[m [01mdep[m unit-codocDoc-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocDoc-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocDoc.cmli-byte > $(BUILDIR)/lib-codoc/codocDoc.mli.d

$(BUILDIR)/lib-codoc/codocDoc.cmi:  \
    $(BUILDIR)/lib-codoc/codocDoc.cmli-byte \
    $(BUILDIR)/lib-codoc/codocDoc.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocDoc-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocDoc.cmli-byte'; \
        else echo 'codocDoc.cmi              [32m<=[m [01mcompile-byte[m unit-codocDoc-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocDoc-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocDoc.cmli-byte

$(BUILDIR)/lib-codoc/codocDoc.ml: lib/codocDoc.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocDoc.ml $(BUILDIR)/lib-codoc/codocDoc.ml'; \
        else echo 'codocDoc.ml               [32m<=[m [01mprepare[m unit-codocDoc-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocDoc.ml $(BUILDIR)/lib-codoc/codocDoc.ml

$(BUILDIR)/lib-codoc/codocDoc.cml-byte: $(BUILDIR)/lib-codoc/codocDoc.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDoc.ml > $(BUILDIR)/lib-codoc/codocDoc.cml-byte'; \
        else echo 'codocDoc.cml-byte         [32m<=[m [01mpp-byte[m unit-codocDoc-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDoc.ml > $(BUILDIR)/lib-codoc/codocDoc.cml-byte

$(BUILDIR)/lib-codoc/codocDoc.cml-native: $(BUILDIR)/lib-codoc/codocDoc.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDoc.ml > $(BUILDIR)/lib-codoc/codocDoc.cml-native'; \
        else echo 'codocDoc.cml-native       [32m<=[m [01mpp-native[m unit-codocDoc-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDoc-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDoc.ml > $(BUILDIR)/lib-codoc/codocDoc.cml-native

$(BUILDIR)/lib-codoc/codocDoc.ml.d: $(BUILDIR)/lib-codoc/codocDoc.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocDoc-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-byte > $(BUILDIR)/lib-codoc/codocDoc.ml.d'; \
        else echo 'codocDoc.ml.d             [32m<=[m [01mdep[m unit-codocDoc-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocDoc-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-byte > $(BUILDIR)/lib-codoc/codocDoc.ml.d

$(BUILDIR)/lib-codoc/codocDoc.cmo:  \
    $(BUILDIR)/lib-codoc/codocDoc.ml.d \
    $(BUILDIR)/lib-codoc/codocDoc.cml-byte \
    $(BUILDIR)/lib-codoc/codocDoc.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocDoc-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-byte'; \
        else echo 'codocDoc.cmo              [32m<=[m [01mcompile-byte[m unit-codocDoc-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocDoc-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-byte

$(BUILDIR)/lib-codoc/codocDoc.cmx:  \
    $(BUILDIR)/lib-codoc/codocDoc.ml.d \
    $(BUILDIR)/lib-codoc/codocDoc.cmi \
    $(BUILDIR)/lib-codoc/codocDoc.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocDoc-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-native'; \
        else echo 'codocDoc.cmx              [32m<=[m [01mcompile-native[m unit-codocDoc-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocDoc-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDoc.cml-native

$(BUILDIR)/lib-codoc/codocUtil.ml: lib/codocUtil.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocUtil.ml $(BUILDIR)/lib-codoc/codocUtil.ml'; \
        else echo 'codocUtil.ml              [32m<=[m [01mprepare[m unit-codocUtil-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocUtil.ml $(BUILDIR)/lib-codoc/codocUtil.ml

$(BUILDIR)/lib-codoc/codocUtil.cml-byte: $(BUILDIR)/lib-codoc/codocUtil.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocUtil-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocUtil.ml > $(BUILDIR)/lib-codoc/codocUtil.cml-byte'; \
        else echo 'codocUtil.cml-byte        [32m<=[m [01mpp-byte[m unit-codocUtil-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocUtil-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocUtil.ml > $(BUILDIR)/lib-codoc/codocUtil.cml-byte

$(BUILDIR)/lib-codoc/codocUtil.cml-native: $(BUILDIR)/lib-codoc/codocUtil.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocUtil-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocUtil.ml > $(BUILDIR)/lib-codoc/codocUtil.cml-native'; \
        else echo 'codocUtil.cml-native      [32m<=[m [01mpp-native[m unit-codocUtil-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocUtil-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocUtil.ml > $(BUILDIR)/lib-codoc/codocUtil.cml-native

$(BUILDIR)/lib-codoc/codocUtil.ml.d: $(BUILDIR)/lib-codoc/codocUtil.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocUtil-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-byte > $(BUILDIR)/lib-codoc/codocUtil.ml.d'; \
        else echo 'codocUtil.ml.d            [32m<=[m [01mdep[m unit-codocUtil-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocUtil-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-byte > $(BUILDIR)/lib-codoc/codocUtil.ml.d

$(BUILDIR)/lib-codoc/codocUtil.cmi $(BUILDIR)/lib-codoc/codocUtil.cmo:  \
    $(BUILDIR)/lib-codoc/codocUtil.ml.d \
    $(BUILDIR)/lib-codoc/codocUtil.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocUtil-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-byte'; \
        else echo 'codocUtil.cmi codocUtil.cmo [32m<=[m [01mcompile-byte[m unit-codocUtil-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocUtil-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-byte

$(BUILDIR)/lib-codoc/codocUtil.cmx:  \
    $(BUILDIR)/lib-codoc/codocUtil.ml.d \
    $(BUILDIR)/lib-codoc/codocUtil.cmi \
    $(BUILDIR)/lib-codoc/codocUtil.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocUtil-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-native'; \
        else echo 'codocUtil.cmx             [32m<=[m [01mcompile-native[m unit-codocUtil-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocUtil-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocUtil.cml-native

$(BUILDIR)/lib-codoc/codocDocHtml.mli: lib/codocDocHtml.mli \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocDocHtml.mli $(BUILDIR)/lib-codoc/codocDocHtml.mli'; \
        else echo 'codocDocHtml.mli          [32m<=[m [01mprepare[m unit-codocDocHtml-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocDocHtml.mli $(BUILDIR)/lib-codoc/codocDocHtml.mli

$(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte: $(BUILDIR)/lib-codoc/codocDocHtml.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocHtml.mli > $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte'; \
        else echo 'codocDocHtml.cmli-byte    [32m<=[m [01mpp-byte[m unit-codocDocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocHtml.mli > $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte

$(BUILDIR)/lib-codoc/codocDocHtml.cmli-native: $(BUILDIR)/lib-codoc/codocDocHtml.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocHtml.mli > $(BUILDIR)/lib-codoc/codocDocHtml.cmli-native'; \
        else echo 'codocDocHtml.cmli-native  [32m<=[m [01mpp-native[m unit-codocDocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocHtml.mli > $(BUILDIR)/lib-codoc/codocDocHtml.cmli-native

$(BUILDIR)/lib-codoc/codocDocHtml.mli.d: $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocDocHtml-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte > $(BUILDIR)/lib-codoc/codocDocHtml.mli.d'; \
        else echo 'codocDocHtml.mli.d        [32m<=[m [01mdep[m unit-codocDocHtml-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocDocHtml-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte > $(BUILDIR)/lib-codoc/codocDocHtml.mli.d

$(BUILDIR)/lib-codoc/codocDocHtml.cmi:  \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocDocHtml-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte'; \
        else echo 'codocDocHtml.cmi          [32m<=[m [01mcompile-byte[m unit-codocDocHtml-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocDocHtml-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocDocHtml.cmli-byte

$(BUILDIR)/lib-codoc/codocDocHtml.ml: lib/codocDocHtml.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocDocHtml.ml $(BUILDIR)/lib-codoc/codocDocHtml.ml'; \
        else echo 'codocDocHtml.ml           [32m<=[m [01mprepare[m unit-codocDocHtml-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocDocHtml.ml $(BUILDIR)/lib-codoc/codocDocHtml.ml

$(BUILDIR)/lib-codoc/codocDocHtml.cml-byte: $(BUILDIR)/lib-codoc/codocDocHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocHtml.ml > $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte'; \
        else echo 'codocDocHtml.cml-byte     [32m<=[m [01mpp-byte[m unit-codocDocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocDocHtml.ml > $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte

$(BUILDIR)/lib-codoc/codocDocHtml.cml-native: $(BUILDIR)/lib-codoc/codocDocHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocHtml.ml > $(BUILDIR)/lib-codoc/codocDocHtml.cml-native'; \
        else echo 'codocDocHtml.cml-native   [32m<=[m [01mpp-native[m unit-codocDocHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocDocHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocDocHtml.ml > $(BUILDIR)/lib-codoc/codocDocHtml.cml-native

$(BUILDIR)/lib-codoc/codocDocHtml.ml.d: $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocDocHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte > $(BUILDIR)/lib-codoc/codocDocHtml.ml.d'; \
        else echo 'codocDocHtml.ml.d         [32m<=[m [01mdep[m unit-codocDocHtml-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocDocHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte > $(BUILDIR)/lib-codoc/codocDocHtml.ml.d

$(BUILDIR)/lib-codoc/codocDocHtml.cmo:  \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocDocHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte'; \
        else echo 'codocDocHtml.cmo          [32m<=[m [01mcompile-byte[m unit-codocDocHtml-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocDocHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-byte

$(BUILDIR)/lib-codoc/codocDocHtml.cmx:  \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocDocHtml.cmi \
    $(BUILDIR)/lib-codoc/codocDocHtml.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocDocHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-native'; \
        else echo 'codocDocHtml.cmx          [32m<=[m [01mcompile-native[m unit-codocDocHtml-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocDocHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocDocHtml.cml-native

$(BUILDIR)/lib-codoc/codocXml.ml: lib/codocXml.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocXml.ml $(BUILDIR)/lib-codoc/codocXml.ml'; \
        else echo 'codocXml.ml               [32m<=[m [01mprepare[m unit-codocXml-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocXml.ml $(BUILDIR)/lib-codoc/codocXml.ml

$(BUILDIR)/lib-codoc/codocXml.cml-byte: $(BUILDIR)/lib-codoc/codocXml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocXml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocXml.ml > $(BUILDIR)/lib-codoc/codocXml.cml-byte'; \
        else echo 'codocXml.cml-byte         [32m<=[m [01mpp-byte[m unit-codocXml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocXml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocXml.ml > $(BUILDIR)/lib-codoc/codocXml.cml-byte

$(BUILDIR)/lib-codoc/codocXml.cml-native: $(BUILDIR)/lib-codoc/codocXml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocXml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocXml.ml > $(BUILDIR)/lib-codoc/codocXml.cml-native'; \
        else echo 'codocXml.cml-native       [32m<=[m [01mpp-native[m unit-codocXml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocXml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocXml.ml > $(BUILDIR)/lib-codoc/codocXml.cml-native

$(BUILDIR)/lib-codoc/codocXml.ml.d: $(BUILDIR)/lib-codoc/codocXml.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocXml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocXml.cml-byte > $(BUILDIR)/lib-codoc/codocXml.ml.d'; \
        else echo 'codocXml.ml.d             [32m<=[m [01mdep[m unit-codocXml-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocXml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocXml.cml-byte > $(BUILDIR)/lib-codoc/codocXml.ml.d

$(BUILDIR)/lib-codoc/codocXml.cmi $(BUILDIR)/lib-codoc/codocXml.cmo:  \
    $(BUILDIR)/lib-codoc/codocXml.ml.d \
    $(BUILDIR)/lib-codoc/codocXml.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocXml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocXml.cml-byte'; \
        else echo 'codocXml.cmi codocXml.cmo [32m<=[m [01mcompile-byte[m unit-codocXml-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocXml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocXml.cml-byte

$(BUILDIR)/lib-codoc/codocXml.cmx:  \
    $(BUILDIR)/lib-codoc/codocXml.ml.d \
    $(BUILDIR)/lib-codoc/codocXml.cmi \
    $(BUILDIR)/lib-codoc/codocXml.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocXml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocXml.cml-native'; \
        else echo 'codocXml.cmx              [32m<=[m [01mcompile-native[m unit-codocXml-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocXml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocXml.cml-native

$(BUILDIR)/lib-codoc/codocIndex.ml: lib/codocIndex.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocIndex.ml $(BUILDIR)/lib-codoc/codocIndex.ml'; \
        else echo 'codocIndex.ml             [32m<=[m [01mprepare[m unit-codocIndex-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocIndex.ml $(BUILDIR)/lib-codoc/codocIndex.ml

$(BUILDIR)/lib-codoc/codocIndex.cml-byte: $(BUILDIR)/lib-codoc/codocIndex.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocIndex-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocIndex.ml > $(BUILDIR)/lib-codoc/codocIndex.cml-byte'; \
        else echo 'codocIndex.cml-byte       [32m<=[m [01mpp-byte[m unit-codocIndex-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocIndex-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocIndex.ml > $(BUILDIR)/lib-codoc/codocIndex.cml-byte

$(BUILDIR)/lib-codoc/codocIndex.cml-native: $(BUILDIR)/lib-codoc/codocIndex.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocIndex-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocIndex.ml > $(BUILDIR)/lib-codoc/codocIndex.cml-native'; \
        else echo 'codocIndex.cml-native     [32m<=[m [01mpp-native[m unit-codocIndex-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocIndex-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocIndex.ml > $(BUILDIR)/lib-codoc/codocIndex.cml-native

$(BUILDIR)/lib-codoc/codocIndex.ml.d: $(BUILDIR)/lib-codoc/codocIndex.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocIndex-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-byte > $(BUILDIR)/lib-codoc/codocIndex.ml.d'; \
        else echo 'codocIndex.ml.d           [32m<=[m [01mdep[m unit-codocIndex-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocIndex-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-byte > $(BUILDIR)/lib-codoc/codocIndex.ml.d

$(BUILDIR)/lib-codoc/codocIndex.cmi $(BUILDIR)/lib-codoc/codocIndex.cmo:  \
    $(BUILDIR)/lib-codoc/codocIndex.ml.d \
    $(BUILDIR)/lib-codoc/codocIndex.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocIndex-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-byte'; \
        else echo 'codocIndex.cmi codocIndex.cmo [32m<=[m [01mcompile-byte[m unit-codocIndex-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocIndex-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-byte

$(BUILDIR)/lib-codoc/codocIndex.cmx:  \
    $(BUILDIR)/lib-codoc/codocIndex.ml.d \
    $(BUILDIR)/lib-codoc/codocIndex.cmi \
    $(BUILDIR)/lib-codoc/codocIndex.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocIndex-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-native'; \
        else echo 'codocIndex.cmx            [32m<=[m [01mcompile-native[m unit-codocIndex-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocIndex-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocIndex.cml-native

$(BUILDIR)/lib-codoc/codocIndexHtml.ml: lib/codocIndexHtml.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocIndexHtml.ml $(BUILDIR)/lib-codoc/codocIndexHtml.ml'; \
        else echo 'codocIndexHtml.ml         [32m<=[m [01mprepare[m unit-codocIndexHtml-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocIndexHtml.ml $(BUILDIR)/lib-codoc/codocIndexHtml.ml

$(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte: $(BUILDIR)/lib-codoc/codocIndexHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocIndexHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocIndexHtml.ml > $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte'; \
        else echo 'codocIndexHtml.cml-byte   [32m<=[m [01mpp-byte[m unit-codocIndexHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocIndexHtml-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocIndexHtml.ml > $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte

$(BUILDIR)/lib-codoc/codocIndexHtml.cml-native: $(BUILDIR)/lib-codoc/codocIndexHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocIndexHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocIndexHtml.ml > $(BUILDIR)/lib-codoc/codocIndexHtml.cml-native'; \
        else echo 'codocIndexHtml.cml-native [32m<=[m [01mpp-native[m unit-codocIndexHtml-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocIndexHtml-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocIndexHtml.ml > $(BUILDIR)/lib-codoc/codocIndexHtml.cml-native

$(BUILDIR)/lib-codoc/codocIndexHtml.ml.d: $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocIndexHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte > $(BUILDIR)/lib-codoc/codocIndexHtml.ml.d'; \
        else echo 'codocIndexHtml.ml.d       [32m<=[m [01mdep[m unit-codocIndexHtml-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocIndexHtml-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte > $(BUILDIR)/lib-codoc/codocIndexHtml.ml.d

$(BUILDIR)/lib-codoc/codocIndexHtml.cmi $(BUILDIR)/lib-codoc/codocIndexHtml.cmo:  \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocIndexHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte'; \
        else echo 'codocIndexHtml.cmi codocIndexHtml.cmo [32m<=[m [01mcompile-byte[m unit-codocIndexHtml-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocIndexHtml-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-byte

$(BUILDIR)/lib-codoc/codocIndexHtml.cmx:  \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cmi \
    $(BUILDIR)/lib-codoc/codocIndexHtml.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocIndexHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-native'; \
        else echo 'codocIndexHtml.cmx        [32m<=[m [01mcompile-native[m unit-codocIndexHtml-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocIndexHtml-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocIndexHtml.cml-native

$(BUILDIR)/lib-codoc/codocEnvironment.mli: lib/codocEnvironment.mli \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocEnvironment.mli $(BUILDIR)/lib-codoc/codocEnvironment.mli'; \
        else echo 'codocEnvironment.mli      [32m<=[m [01mprepare[m unit-codocEnvironment-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocEnvironment.mli $(BUILDIR)/lib-codoc/codocEnvironment.mli

$(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte: $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocEnvironment.mli > $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte'; \
        else echo 'codocEnvironment.cmli-byte [32m<=[m [01mpp-byte[m unit-codocEnvironment-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocEnvironment.mli > $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte

$(BUILDIR)/lib-codoc/codocEnvironment.cmli-native: $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocEnvironment.mli > $(BUILDIR)/lib-codoc/codocEnvironment.cmli-native'; \
        else echo 'codocEnvironment.cmli-native [32m<=[m [01mpp-native[m unit-codocEnvironment-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocEnvironment.mli > $(BUILDIR)/lib-codoc/codocEnvironment.cmli-native

$(BUILDIR)/lib-codoc/codocEnvironment.mli.d: $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocEnvironment-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte > $(BUILDIR)/lib-codoc/codocEnvironment.mli.d'; \
        else echo 'codocEnvironment.mli.d    [32m<=[m [01mdep[m unit-codocEnvironment-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocEnvironment-lib-codoc.dep) -intf $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte > $(BUILDIR)/lib-codoc/codocEnvironment.mli.d

$(BUILDIR)/lib-codoc/codocEnvironment.cmi:  \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocEnvironment-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte'; \
        else echo 'codocEnvironment.cmi      [32m<=[m [01mcompile-byte[m unit-codocEnvironment-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocEnvironment-lib-codoc.compile-byte) -intf $(BUILDIR)/lib-codoc/codocEnvironment.cmli-byte

$(BUILDIR)/lib-codoc/codocEnvironment.ml: lib/codocEnvironment.ml \
    | $(BUILDIR)/lib-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/lib/codocEnvironment.ml $(BUILDIR)/lib-codoc/codocEnvironment.ml'; \
        else echo 'codocEnvironment.ml       [32m<=[m [01mprepare[m unit-codocEnvironment-lib-codoc'; fi
	@$(LN) $(ROOTDIR)/lib/codocEnvironment.ml $(BUILDIR)/lib-codoc/codocEnvironment.ml

$(BUILDIR)/lib-codoc/codocEnvironment.cml-byte: $(BUILDIR)/lib-codoc/codocEnvironment.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocEnvironment.ml > $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte'; \
        else echo 'codocEnvironment.cml-byte [32m<=[m [01mpp-byte[m unit-codocEnvironment-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-byte) $(BUILDIR)/lib-codoc/codocEnvironment.ml > $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte

$(BUILDIR)/lib-codoc/codocEnvironment.cml-native: $(BUILDIR)/lib-codoc/codocEnvironment.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocEnvironment.ml > $(BUILDIR)/lib-codoc/codocEnvironment.cml-native'; \
        else echo 'codocEnvironment.cml-native [32m<=[m [01mpp-native[m unit-codocEnvironment-lib-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocEnvironment-lib-codoc.pp-native) $(BUILDIR)/lib-codoc/codocEnvironment.ml > $(BUILDIR)/lib-codoc/codocEnvironment.cml-native

$(BUILDIR)/lib-codoc/codocEnvironment.ml.d: $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocEnvironment-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte > $(BUILDIR)/lib-codoc/codocEnvironment.ml.d'; \
        else echo 'codocEnvironment.ml.d     [32m<=[m [01mdep[m unit-codocEnvironment-lib-codoc'; fi
	@$(OCAMLDEP) $(unit-codocEnvironment-lib-codoc.dep) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte > $(BUILDIR)/lib-codoc/codocEnvironment.ml.d

$(BUILDIR)/lib-codoc/codocEnvironment.cmo:  \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml.d \
    $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocEnvironment-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte'; \
        else echo 'codocEnvironment.cmo      [32m<=[m [01mcompile-byte[m unit-codocEnvironment-lib-codoc'; fi
	@$(OCAMLC) -c $(unit-codocEnvironment-lib-codoc.compile-byte) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-byte

$(BUILDIR)/lib-codoc/codocEnvironment.cmx:  \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml.d \
    $(BUILDIR)/lib-codoc/codocEnvironment.cmi \
    $(BUILDIR)/lib-codoc/codocEnvironment.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocEnvironment-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-native'; \
        else echo 'codocEnvironment.cmx      [32m<=[m [01mcompile-native[m unit-codocEnvironment-lib-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocEnvironment-lib-codoc.compile-native) -impl $(BUILDIR)/lib-codoc/codocEnvironment.cml-native

$(BUILDIR)/unit-codocConfig/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/unit-codocConfig'; \
        else echo 'unit-codocConfig          [32m<=[m [01mprepare[m unit-codocConfig'; fi
	@$(MKDIR) $(BUILDIR)/unit-codocConfig

$(BUILDIR)/unit-codocConfig/codocConfig.ml: cli/codocConfig.ml \
    | $(BUILDIR)/unit-codocConfig/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocConfig.ml $(BUILDIR)/unit-codocConfig/codocConfig.ml'; \
        else echo 'codocConfig.ml            [32m<=[m [01mprepare[m unit-codocConfig'; fi
	@$(LN) $(ROOTDIR)/cli/codocConfig.ml $(BUILDIR)/unit-codocConfig/codocConfig.ml

$(BUILDIR)/unit-codocConfig/codocConfig.cml-byte: $(BUILDIR)/unit-codocConfig/codocConfig.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocConfig.pp-byte) $(BUILDIR)/unit-codocConfig/codocConfig.ml > $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte'; \
        else echo 'codocConfig.cml-byte      [32m<=[m [01mpp-byte[m unit-codocConfig'; fi
	@$(DUMPAST) camlp4o $(unit-codocConfig.pp-byte) $(BUILDIR)/unit-codocConfig/codocConfig.ml > $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte

$(BUILDIR)/unit-codocConfig/codocConfig.cml-native: $(BUILDIR)/unit-codocConfig/codocConfig.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocConfig.pp-native) $(BUILDIR)/unit-codocConfig/codocConfig.ml > $(BUILDIR)/unit-codocConfig/codocConfig.cml-native'; \
        else echo 'codocConfig.cml-native    [32m<=[m [01mpp-native[m unit-codocConfig'; fi
	@$(DUMPAST) camlp4o $(unit-codocConfig.pp-native) $(BUILDIR)/unit-codocConfig/codocConfig.ml > $(BUILDIR)/unit-codocConfig/codocConfig.cml-native

$(BUILDIR)/unit-codocConfig/codocConfig.ml.d: $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocConfig.dep) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte > $(BUILDIR)/unit-codocConfig/codocConfig.ml.d'; \
        else echo 'codocConfig.ml.d          [32m<=[m [01mdep[m unit-codocConfig'; fi
	@$(OCAMLDEP) $(unit-codocConfig.dep) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte > $(BUILDIR)/unit-codocConfig/codocConfig.ml.d

$(BUILDIR)/unit-codocConfig/codocConfig.cmi $(BUILDIR)/unit-codocConfig/codocConfig.cmo:  \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml.d \
    $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocConfig.compile-byte) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte'; \
        else echo 'codocConfig.cmi codocConfig.cmo [32m<=[m [01mcompile-byte[m unit-codocConfig'; fi
	@$(OCAMLC) -c $(unit-codocConfig.compile-byte) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-byte

$(BUILDIR)/unit-codocConfig/codocConfig.cmx:  \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml.d \
    $(BUILDIR)/unit-codocConfig/codocConfig.cmi \
    $(BUILDIR)/unit-codocConfig/codocConfig.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocConfig.compile-native) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-native'; \
        else echo 'codocConfig.cmx           [32m<=[m [01mcompile-native[m unit-codocConfig'; fi
	@$(OCAMLOPT) -c $(unit-codocConfig.compile-native) -impl $(BUILDIR)/unit-codocConfig/codocConfig.cml-native

$(BUILDIR)/bin-codoc/codocCli.mli: cli/codocCli.mli \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCli.mli $(BUILDIR)/bin-codoc/codocCli.mli'; \
        else echo 'codocCli.mli              [32m<=[m [01mprepare[m unit-codocCli-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCli.mli $(BUILDIR)/bin-codoc/codocCli.mli

$(BUILDIR)/bin-codoc/codocCli.cmli-byte: $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCli.mli > $(BUILDIR)/bin-codoc/codocCli.cmli-byte'; \
        else echo 'codocCli.cmli-byte        [32m<=[m [01mpp-byte[m unit-codocCli-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCli.mli > $(BUILDIR)/bin-codoc/codocCli.cmli-byte

$(BUILDIR)/bin-codoc/codocCli.cmli-native: $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCli.mli > $(BUILDIR)/bin-codoc/codocCli.cmli-native'; \
        else echo 'codocCli.cmli-native      [32m<=[m [01mpp-native[m unit-codocCli-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCli.mli > $(BUILDIR)/bin-codoc/codocCli.cmli-native

$(BUILDIR)/bin-codoc/codocCli.mli.d: $(BUILDIR)/bin-codoc/codocCli.cmli-byte \
    |  \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCli-bin-codoc.dep) -intf $(BUILDIR)/bin-codoc/codocCli.cmli-byte > $(BUILDIR)/bin-codoc/codocCli.mli.d'; \
        else echo 'codocCli.mli.d            [32m<=[m [01mdep[m unit-codocCli-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCli-bin-codoc.dep) -intf $(BUILDIR)/bin-codoc/codocCli.cmli-byte > $(BUILDIR)/bin-codoc/codocCli.mli.d

$(BUILDIR)/bin-codoc/codocCli.cmi:  \
    $(BUILDIR)/bin-codoc/codocCli.cmli-byte \
    $(BUILDIR)/bin-codoc/codocCli.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCli-bin-codoc.compile-byte) -intf $(BUILDIR)/bin-codoc/codocCli.cmli-byte'; \
        else echo 'codocCli.cmi              [32m<=[m [01mcompile-byte[m unit-codocCli-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCli-bin-codoc.compile-byte) -intf $(BUILDIR)/bin-codoc/codocCli.cmli-byte

$(BUILDIR)/bin-codoc/codocCli.ml: cli/codocCli.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCli.ml $(BUILDIR)/bin-codoc/codocCli.ml'; \
        else echo 'codocCli.ml               [32m<=[m [01mprepare[m unit-codocCli-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCli.ml $(BUILDIR)/bin-codoc/codocCli.ml

$(BUILDIR)/bin-codoc/codocCli.cml-byte: $(BUILDIR)/bin-codoc/codocCli.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCli.ml > $(BUILDIR)/bin-codoc/codocCli.cml-byte'; \
        else echo 'codocCli.cml-byte         [32m<=[m [01mpp-byte[m unit-codocCli-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCli.ml > $(BUILDIR)/bin-codoc/codocCli.cml-byte

$(BUILDIR)/bin-codoc/codocCli.cml-native: $(BUILDIR)/bin-codoc/codocCli.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCli.ml > $(BUILDIR)/bin-codoc/codocCli.cml-native'; \
        else echo 'codocCli.cml-native       [32m<=[m [01mpp-native[m unit-codocCli-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCli-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCli.ml > $(BUILDIR)/bin-codoc/codocCli.cml-native

$(BUILDIR)/bin-codoc/codocCli.ml.d: $(BUILDIR)/bin-codoc/codocCli.cml-byte \
    |  \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCli-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCli.cml-byte > $(BUILDIR)/bin-codoc/codocCli.ml.d'; \
        else echo 'codocCli.ml.d             [32m<=[m [01mdep[m unit-codocCli-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCli-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCli.cml-byte > $(BUILDIR)/bin-codoc/codocCli.ml.d

$(BUILDIR)/bin-codoc/codocCli.cmo:  \
    $(BUILDIR)/bin-codoc/codocCli.ml.d \
    $(BUILDIR)/bin-codoc/codocCli.cml-byte \
    $(BUILDIR)/bin-codoc/codocCli.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCli-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCli.cml-byte'; \
        else echo 'codocCli.cmo              [32m<=[m [01mcompile-byte[m unit-codocCli-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCli-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCli.cml-byte

$(BUILDIR)/bin-codoc/codocCli.cmx:  \
    $(BUILDIR)/bin-codoc/codocCli.ml.d \
    $(BUILDIR)/bin-codoc/codocCli.cmi \
    $(BUILDIR)/bin-codoc/codocCli.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocCli-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCli.cml-native'; \
        else echo 'codocCli.cmx              [32m<=[m [01mcompile-native[m unit-codocCli-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocCli-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCli.cml-native

$(BUILDIR)/unit-codocSysUtil/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/unit-codocSysUtil'; \
        else echo 'unit-codocSysUtil         [32m<=[m [01mprepare[m unit-codocSysUtil'; fi
	@$(MKDIR) $(BUILDIR)/unit-codocSysUtil

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml: cli/codocSysUtil.ml \
    | $(BUILDIR)/unit-codocSysUtil/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocSysUtil.ml $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml'; \
        else echo 'codocSysUtil.ml           [32m<=[m [01mprepare[m unit-codocSysUtil'; fi
	@$(LN) $(ROOTDIR)/cli/codocSysUtil.ml $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte: $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocSysUtil.pp-byte) $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte'; \
        else echo 'codocSysUtil.cml-byte     [32m<=[m [01mpp-byte[m unit-codocSysUtil'; fi
	@$(DUMPAST) camlp4o $(unit-codocSysUtil.pp-byte) $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native: $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocSysUtil.pp-native) $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native'; \
        else echo 'codocSysUtil.cml-native   [32m<=[m [01mpp-native[m unit-codocSysUtil'; fi
	@$(DUMPAST) camlp4o $(unit-codocSysUtil.pp-native) $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d: $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocSysUtil.dep) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d'; \
        else echo 'codocSysUtil.ml.d         [32m<=[m [01mdep[m unit-codocSysUtil'; fi
	@$(OCAMLDEP) $(unit-codocSysUtil.dep) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte > $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmi $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmo:  \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocSysUtil.compile-byte) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte'; \
        else echo 'codocSysUtil.cmi codocSysUtil.cmo [32m<=[m [01mcompile-byte[m unit-codocSysUtil'; fi
	@$(OCAMLC) -c $(unit-codocSysUtil.compile-byte) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-byte

$(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmx:  \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cmi \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocSysUtil.compile-native) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native'; \
        else echo 'codocSysUtil.cmx          [32m<=[m [01mcompile-native[m unit-codocSysUtil'; fi
	@$(OCAMLOPT) -c $(unit-codocSysUtil.compile-native) -impl $(BUILDIR)/unit-codocSysUtil/codocSysUtil.cml-native

$(BUILDIR)/bin-codoc/codocCliExtract.ml: cli/codocCliExtract.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCliExtract.ml $(BUILDIR)/bin-codoc/codocCliExtract.ml'; \
        else echo 'codocCliExtract.ml        [32m<=[m [01mprepare[m unit-codocCliExtract-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCliExtract.ml $(BUILDIR)/bin-codoc/codocCliExtract.ml

$(BUILDIR)/bin-codoc/codocCliExtract.cml-byte: $(BUILDIR)/bin-codoc/codocCliExtract.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliExtract-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliExtract.ml > $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte'; \
        else echo 'codocCliExtract.cml-byte  [32m<=[m [01mpp-byte[m unit-codocCliExtract-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliExtract-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliExtract.ml > $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte

$(BUILDIR)/bin-codoc/codocCliExtract.cml-native: $(BUILDIR)/bin-codoc/codocCliExtract.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliExtract-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliExtract.ml > $(BUILDIR)/bin-codoc/codocCliExtract.cml-native'; \
        else echo 'codocCliExtract.cml-native [32m<=[m [01mpp-native[m unit-codocCliExtract-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliExtract-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliExtract.ml > $(BUILDIR)/bin-codoc/codocCliExtract.cml-native

$(BUILDIR)/bin-codoc/codocCliExtract.ml.d: $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCliExtract-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte > $(BUILDIR)/bin-codoc/codocCliExtract.ml.d'; \
        else echo 'codocCliExtract.ml.d      [32m<=[m [01mdep[m unit-codocCliExtract-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCliExtract-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte > $(BUILDIR)/bin-codoc/codocCliExtract.ml.d

$(BUILDIR)/bin-codoc/codocCliExtract.cmi $(BUILDIR)/bin-codoc/codocCliExtract.cmo:  \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml.d \
    $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCliExtract-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte'; \
        else echo 'codocCliExtract.cmi codocCliExtract.cmo [32m<=[m [01mcompile-byte[m unit-codocCliExtract-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCliExtract-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-byte

$(BUILDIR)/bin-codoc/codocCliExtract.cmx:  \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml.d \
    $(BUILDIR)/bin-codoc/codocCliExtract.cmi \
    $(BUILDIR)/bin-codoc/codocCliExtract.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocCliExtract-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-native'; \
        else echo 'codocCliExtract.cmx       [32m<=[m [01mcompile-native[m unit-codocCliExtract-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocCliExtract-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliExtract.cml-native

$(BUILDIR)/bin-codoc/codocCliLink.ml: cli/codocCliLink.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCliLink.ml $(BUILDIR)/bin-codoc/codocCliLink.ml'; \
        else echo 'codocCliLink.ml           [32m<=[m [01mprepare[m unit-codocCliLink-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCliLink.ml $(BUILDIR)/bin-codoc/codocCliLink.ml

$(BUILDIR)/bin-codoc/codocCliLink.cml-byte: $(BUILDIR)/bin-codoc/codocCliLink.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliLink-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliLink.ml > $(BUILDIR)/bin-codoc/codocCliLink.cml-byte'; \
        else echo 'codocCliLink.cml-byte     [32m<=[m [01mpp-byte[m unit-codocCliLink-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliLink-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliLink.ml > $(BUILDIR)/bin-codoc/codocCliLink.cml-byte

$(BUILDIR)/bin-codoc/codocCliLink.cml-native: $(BUILDIR)/bin-codoc/codocCliLink.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliLink-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliLink.ml > $(BUILDIR)/bin-codoc/codocCliLink.cml-native'; \
        else echo 'codocCliLink.cml-native   [32m<=[m [01mpp-native[m unit-codocCliLink-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliLink-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliLink.ml > $(BUILDIR)/bin-codoc/codocCliLink.cml-native

$(BUILDIR)/bin-codoc/codocCliLink.ml.d: $(BUILDIR)/bin-codoc/codocCliLink.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCliLink-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-byte > $(BUILDIR)/bin-codoc/codocCliLink.ml.d'; \
        else echo 'codocCliLink.ml.d         [32m<=[m [01mdep[m unit-codocCliLink-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCliLink-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-byte > $(BUILDIR)/bin-codoc/codocCliLink.ml.d

$(BUILDIR)/bin-codoc/codocCliLink.cmi $(BUILDIR)/bin-codoc/codocCliLink.cmo:  \
    $(BUILDIR)/bin-codoc/codocCliLink.ml.d \
    $(BUILDIR)/bin-codoc/codocCliLink.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCliLink-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-byte'; \
        else echo 'codocCliLink.cmi codocCliLink.cmo [32m<=[m [01mcompile-byte[m unit-codocCliLink-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCliLink-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-byte

$(BUILDIR)/bin-codoc/codocCliLink.cmx:  \
    $(BUILDIR)/bin-codoc/codocCliLink.ml.d \
    $(BUILDIR)/bin-codoc/codocCliLink.cmi \
    $(BUILDIR)/bin-codoc/codocCliLink.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocCliLink-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-native'; \
        else echo 'codocCliLink.cmx          [32m<=[m [01mcompile-native[m unit-codocCliLink-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocCliLink-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliLink.cml-native

$(BUILDIR)/bin-codoc/codocCliHtml.ml: cli/codocCliHtml.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCliHtml.ml $(BUILDIR)/bin-codoc/codocCliHtml.ml'; \
        else echo 'codocCliHtml.ml           [32m<=[m [01mprepare[m unit-codocCliHtml-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCliHtml.ml $(BUILDIR)/bin-codoc/codocCliHtml.ml

$(BUILDIR)/bin-codoc/codocCliHtml.cml-byte: $(BUILDIR)/bin-codoc/codocCliHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliHtml-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliHtml.ml > $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte'; \
        else echo 'codocCliHtml.cml-byte     [32m<=[m [01mpp-byte[m unit-codocCliHtml-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliHtml-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliHtml.ml > $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte

$(BUILDIR)/bin-codoc/codocCliHtml.cml-native: $(BUILDIR)/bin-codoc/codocCliHtml.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliHtml-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliHtml.ml > $(BUILDIR)/bin-codoc/codocCliHtml.cml-native'; \
        else echo 'codocCliHtml.cml-native   [32m<=[m [01mpp-native[m unit-codocCliHtml-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliHtml-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliHtml.ml > $(BUILDIR)/bin-codoc/codocCliHtml.cml-native

$(BUILDIR)/bin-codoc/codocCliHtml.ml.d: $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCliHtml-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte > $(BUILDIR)/bin-codoc/codocCliHtml.ml.d'; \
        else echo 'codocCliHtml.ml.d         [32m<=[m [01mdep[m unit-codocCliHtml-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCliHtml-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte > $(BUILDIR)/bin-codoc/codocCliHtml.ml.d

$(BUILDIR)/bin-codoc/codocCliHtml.cmi $(BUILDIR)/bin-codoc/codocCliHtml.cmo:  \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml.d \
    $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCliHtml-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte'; \
        else echo 'codocCliHtml.cmi codocCliHtml.cmo [32m<=[m [01mcompile-byte[m unit-codocCliHtml-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCliHtml-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-byte

$(BUILDIR)/bin-codoc/codocCliHtml.cmx:  \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml.d \
    $(BUILDIR)/bin-codoc/codocCliHtml.cmi \
    $(BUILDIR)/bin-codoc/codocCliHtml.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocCliHtml-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-native'; \
        else echo 'codocCliHtml.cmx          [32m<=[m [01mcompile-native[m unit-codocCliHtml-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocCliHtml-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliHtml.cml-native

$(BUILDIR)/bin-codoc/codocCliDoc.ml: cli/codocCliDoc.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocCliDoc.ml $(BUILDIR)/bin-codoc/codocCliDoc.ml'; \
        else echo 'codocCliDoc.ml            [32m<=[m [01mprepare[m unit-codocCliDoc-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocCliDoc.ml $(BUILDIR)/bin-codoc/codocCliDoc.ml

$(BUILDIR)/bin-codoc/codocCliDoc.cml-byte: $(BUILDIR)/bin-codoc/codocCliDoc.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliDoc-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliDoc.ml > $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte'; \
        else echo 'codocCliDoc.cml-byte      [32m<=[m [01mpp-byte[m unit-codocCliDoc-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliDoc-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocCliDoc.ml > $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte

$(BUILDIR)/bin-codoc/codocCliDoc.cml-native: $(BUILDIR)/bin-codoc/codocCliDoc.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocCliDoc-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliDoc.ml > $(BUILDIR)/bin-codoc/codocCliDoc.cml-native'; \
        else echo 'codocCliDoc.cml-native    [32m<=[m [01mpp-native[m unit-codocCliDoc-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocCliDoc-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocCliDoc.ml > $(BUILDIR)/bin-codoc/codocCliDoc.cml-native

$(BUILDIR)/bin-codoc/codocCliDoc.ml.d: $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte \
    |  \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocCliDoc-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte > $(BUILDIR)/bin-codoc/codocCliDoc.ml.d'; \
        else echo 'codocCliDoc.ml.d          [32m<=[m [01mdep[m unit-codocCliDoc-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocCliDoc-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte > $(BUILDIR)/bin-codoc/codocCliDoc.ml.d

$(BUILDIR)/bin-codoc/codocCliDoc.cmi $(BUILDIR)/bin-codoc/codocCliDoc.cmo:  \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml.d \
    $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocCliDoc-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte'; \
        else echo 'codocCliDoc.cmi codocCliDoc.cmo [32m<=[m [01mcompile-byte[m unit-codocCliDoc-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocCliDoc-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-byte

$(BUILDIR)/bin-codoc/codocCliDoc.cmx:  \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml.d \
    $(BUILDIR)/bin-codoc/codocCliDoc.cmi \
    $(BUILDIR)/bin-codoc/codocCliDoc.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocCliDoc-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-native'; \
        else echo 'codocCliDoc.cmx           [32m<=[m [01mcompile-native[m unit-codocCliDoc-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocCliDoc-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocCliDoc.cml-native

$(BUILDIR)/bin-codoc/codocMain.ml: cli/codocMain.ml \
    | $(BUILDIR)/bin-codoc/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/cli/codocMain.ml $(BUILDIR)/bin-codoc/codocMain.ml'; \
        else echo 'codocMain.ml              [32m<=[m [01mprepare[m unit-codocMain-bin-codoc'; fi
	@$(LN) $(ROOTDIR)/cli/codocMain.ml $(BUILDIR)/bin-codoc/codocMain.ml

$(BUILDIR)/bin-codoc/codocMain.cml-byte: $(BUILDIR)/bin-codoc/codocMain.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocMain-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocMain.ml > $(BUILDIR)/bin-codoc/codocMain.cml-byte'; \
        else echo 'codocMain.cml-byte        [32m<=[m [01mpp-byte[m unit-codocMain-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocMain-bin-codoc.pp-byte) $(BUILDIR)/bin-codoc/codocMain.ml > $(BUILDIR)/bin-codoc/codocMain.cml-byte

$(BUILDIR)/bin-codoc/codocMain.cml-native: $(BUILDIR)/bin-codoc/codocMain.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-codocMain-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocMain.ml > $(BUILDIR)/bin-codoc/codocMain.cml-native'; \
        else echo 'codocMain.cml-native      [32m<=[m [01mpp-native[m unit-codocMain-bin-codoc'; fi
	@$(DUMPAST) camlp4o $(unit-codocMain-bin-codoc.pp-native) $(BUILDIR)/bin-codoc/codocMain.ml > $(BUILDIR)/bin-codoc/codocMain.cml-native

$(BUILDIR)/bin-codoc/codocMain.ml.d: $(BUILDIR)/bin-codoc/codocMain.cml-byte \
    |  \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/lib-codoc/codocHtml.ml \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml \
    $(BUILDIR)/lib-codoc/codocDoc.ml \
    $(BUILDIR)/lib-codoc/codocUtil.ml \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml \
    $(BUILDIR)/lib-codoc/codocXml.ml \
    $(BUILDIR)/lib-codoc/codocIndex.ml \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocCli.ml \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml \
    $(BUILDIR)/bin-codoc/codocCliLink.ml \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml \
    $(BUILDIR)/bin-codoc/codocMain.ml \
    $(BUILDIR)/bin-codoc/codocCli.mli \
    $(BUILDIR)/lib-codoc/codocDoc.mli \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli \
    $(BUILDIR)/bin-codoc/codocCli.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-codocMain-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocMain.cml-byte > $(BUILDIR)/bin-codoc/codocMain.ml.d'; \
        else echo 'codocMain.ml.d            [32m<=[m [01mdep[m unit-codocMain-bin-codoc'; fi
	@$(OCAMLDEP) $(unit-codocMain-bin-codoc.dep) -impl $(BUILDIR)/bin-codoc/codocMain.cml-byte > $(BUILDIR)/bin-codoc/codocMain.ml.d

$(BUILDIR)/bin-codoc/codocMain.cmi $(BUILDIR)/bin-codoc/codocMain.cmo:  \
    $(BUILDIR)/bin-codoc/codocMain.ml.d \
    $(BUILDIR)/bin-codoc/codocMain.cml-byte
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-codocMain-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocMain.cml-byte'; \
        else echo 'codocMain.cmi codocMain.cmo [32m<=[m [01mcompile-byte[m unit-codocMain-bin-codoc'; fi
	@$(OCAMLC) -c $(unit-codocMain-bin-codoc.compile-byte) -impl $(BUILDIR)/bin-codoc/codocMain.cml-byte

$(BUILDIR)/bin-codoc/codocMain.cmx:  \
    $(BUILDIR)/bin-codoc/codocMain.ml.d \
    $(BUILDIR)/bin-codoc/codocMain.cmi \
    $(BUILDIR)/bin-codoc/codocMain.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-codocMain-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocMain.cml-native'; \
        else echo 'codocMain.cmx             [32m<=[m [01mcompile-native[m unit-codocMain-bin-codoc'; fi
	@$(OCAMLOPT) -c $(unit-codocMain-bin-codoc.compile-native) -impl $(BUILDIR)/bin-codoc/codocMain.cml-native

-include Makefile.assemble
ifneq ($(filter-out clean help distclean,$(MAKECMDGOALS)),)
-include  \
    $(BUILDIR)/lib-codoc/codocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocDocMaps.ml.d \
    $(BUILDIR)/lib-codoc/codocDoc.ml.d \
    $(BUILDIR)/lib-codoc/codocDoc.mli.d \
    $(BUILDIR)/lib-codoc/codocUtil.ml.d \
    $(BUILDIR)/lib-codoc/codocDocHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocDocHtml.mli.d \
    $(BUILDIR)/lib-codoc/codocXml.ml.d \
    $(BUILDIR)/lib-codoc/codocIndex.ml.d \
    $(BUILDIR)/lib-codoc/codocIndexHtml.ml.d \
    $(BUILDIR)/lib-codoc/codocEnvironment.ml.d \
    $(BUILDIR)/lib-codoc/codocEnvironment.mli.d \
    $(BUILDIR)/unit-codocConfig/codocConfig.ml.d \
    $(BUILDIR)/bin-codoc/codocCli.ml.d \
    $(BUILDIR)/bin-codoc/codocCli.mli.d \
    $(BUILDIR)/unit-codocSysUtil/codocSysUtil.ml.d \
    $(BUILDIR)/bin-codoc/codocCliExtract.ml.d \
    $(BUILDIR)/bin-codoc/codocCliLink.ml.d \
    $(BUILDIR)/bin-codoc/codocCliHtml.ml.d \
    $(BUILDIR)/bin-codoc/codocCliDoc.ml.d \
    $(BUILDIR)/bin-codoc/codocMain.ml.d
endif
include 
